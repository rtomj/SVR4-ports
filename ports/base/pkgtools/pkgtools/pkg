#!/bin/sh

##
## pkg: SVR4 package tools wrapper
##

## pkgtools
pkg_add="/usr/5bin/pkgadd -d"
pkg_ad="/usr/5bin/pkgadd"
pkg_rm="/usr/5bin/pkgrm"
pkg_trans="/usr/5bin/pkgtrans -s"
pkg_proto="/usr/5bin/pkgproto -c"
pkg_mk="/usr/5bin/pkgmk -o"
pkg_ck="/usr/5bin/pkginfo"

## locations
pkg_loc="/var/spool/pkg"
ports_loc="/usr/ports/"
port_loc="/usr/ports/"$category"/"$pkg""
conf_loc="/etc/pkg"

##
## packaging functions
##

chpkg() {
	#echo "===> Checking package"
	if [ -f "$pkg_loc"/"$pkg"-"$version".pkg ]
	then
        echo "======================================================================="
		echo "===> "$pkg_loc"/"$pkg"-"$version".pkg successfully created"
        echo "======================================================================="
    fi
}

mkpkg() {
	cd /tmp/$pkg
	mkpkginfo
	mkproto
	echo "===> Creating package"
    	$pkg_mk
	$pkg_trans "$pkg_loc" "$pkg"-"$version".pkg "$pkg"
    	rm -r "$pkg_loc"/"$pkg"
    	rm -r /tmp/"$pkg"
	chpkg
}

mkproto() {
	### rewrite this

	echo "===> Creating prototype"
	$pkg_proto "$category" .=. > prototype

        # heirloom sed (derived from Solaris) has no -i option...
        tmp=`mktemp prototype.XXXXXX`
        sed '/=/!d' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && rm "$tmp"

        # exclude pkginfo and prototype
        sed '1d;2d;' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && rm "$tmp"

        # newline
        sed '1s/^/i pkginfo\
        /' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && rm "$tmp"
	
}

mkpkginfo() {
	echo "===> Creating pkginfo"
	echo "PKG="$pkg"" >> pkginfo
	echo "NAME="$name"" >> pkginfo
	echo "VERSION="$version"" >> pkginfo
	echo "ARCH="$arch"" >> pkginfo
	echo "CATEGORY="$category"" >> pkginfo
	echo "PSTAMP="$version"" >> pkginfo
	echo "BASEDIR="$basedir"" >> pkginfo
}

### Testing an automatic way to get source and setup for the build
preproc() {
        for i in $source
        do
                wget $i
        done
        mkdep
        mkdir -p /tmp/$pkg
}

mkdep() {
	echo "===> Checking dependencies for $pkg"
	for i in $deps; do
	#echo "$deps" | tr ' ' '\n' | while read i; do
        	echo "===> Checking dependencies for $i"
		a=$(echo $i | awk -F'/' '{print $2}')
		d=$(/usr/5bin/pkginfo | grep -c $a)
        	if [ $d -eq 0 ]
        	then
            		echo "======================================================================="
            		echo "===> Building $i"
            		echo "======================================================================="
            		pkgbuild $i
        	else
           	echo "===> $a is already installed"
        	fi
    	done
}


update() {
    echo "===> Checking ChangeLog.txt"
    old=$($pkg_ck -x $1 | awk 'NR==2{print $2}')
    new=$(grep $1 "$conf_loc"/ChangeLog.txt | awk '{print $2}')
    if [ $old -eq $new ]
    then
        echo ""$1"-"$old".pkg is the latest version"
    elif [ $new -gt $old ]
    then
        echo "===> Upgrade "$1"-"$old" to "$1"-"$new" (y/n)?"
        read answer
        if [ $answer = y ]; then
            echo "===> Removing old package"
            $pkg_rm -n "$1"
            echo "===> Upgrading package"
	    # maybe call pkgbuild?	
	    ver=$(ls "$pkg_loc" | grep $1 | tail -n1)
            $pkg_add $pkg_loc/"$ver"
        elif [ $answer = n ]; then
            exit 1
        fi
    fi
}

install() {
	if [ -n "$1" ]
        then
		pack=$1
		ver=$(ls "$pkg_loc" | "grep" "\<$pack\>" | tail -n1)
		if [ -z "$ver" ]
		then
			echo "Package not found"
			exit 1
		elif [ -n "$ver" ]
		then
			$pkg_add "$pkg_loc"/"$ver"
		fi
	else
	echo "You must specify a package name"
	exit 1
fi
}

envir() {
	num=$(ls $pkg_loc | grep pkg | wc -l)
	inum=$($pkg_ck | wc -l)
echo "
No. of Stream Packages (*.pkg) in cache: "$num"
No. of Installed Packages:               "$inum"
Package cache location:                  $pkg_loc
SVR4 package tools:                      $pkg_add
                                         $pkg_rm
                                         $pkg_proto
                                         $pkg_trans
"
}

usage() {
echo "usage: pkg [command] [argument]

Available commands:
search  (-s)  - searches the repository [TODO]
install (-i)  - installs SVR4 package
update  (-u)  - updates packages [TODO]
remove  (-r)  - uninstalls a package but does not delete it from cache
delete  (-d)  - deletes package from cache and system
sync    (-sy) - sync with repository [TODO]
list    (-l)  - list all installed packages
verify  (-vf) - verify hashes of packages
env     (-e)  - outputs pkg environment and package cache details
ver     (-v)  - check pkg version
help    (-h)  - outputs this message"
}

##
## pkg
##
case "$1" in
	install*|-i*|update*|-u*|remove*|-r*|delete*|-d*|sync*|-sy*)
	if [ "$(id -u)" -ne 0 ]
        then
        	echo "You must be root"
        	exit 1
	elif [ "$(id -u)" -eq 0 ]
        then
		case "$1" in
		install*|-i*)
			install $2
			;;
            	update*|-u*)
            		update "$2"
            		;;
		remove*|-r*)
			"$pkg_rm" "$2"
			;;
            	delete*|-d*)
            		rm "$pkg_loc"/"$2"-*.pkg
            		;;
            	sync*|-sy*)
            		echo "TODO"
            		;;
		esac
	fi
	;;
    	search*|-s*)
    	echo "TODO"
    	;;
    	list*|-l*)
    	"$pkg_ck"
    	;;
    	help*|-h*)
    	usage
    	;;
    	verify*|-vf*)
		if [ -z "$2" ]
		then
			echo "You must specify a package"
			exit 1
		elif [ -n "$2" ]
		then
		sha256sum "$pkg_loc"/"$2"-*.pkg
		fi
    	;;
    	env*|-e*)
	envir
    	;;
    	ver*|-v*)
    	$pkg_ck -x pkgtools
    	;;
esac
